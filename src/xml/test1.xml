<?xml version="1.0" encoding="UTF-8"?> 		<!-- 文档声明 -->
<?xml-stylesheet type="text/css" href="a.css" ?>	<!--导入css样式-->
<users>
	<user id="user1">
		<name>luo</name>
		<age>20</age>
	</user>
	<user id="user2">
		<name>huang</name>
		<age>22</age>
	</user>

	<code>
<!--		CDATA区定义，里面的不需要转义字符号，原样显示-->
		<![CDATA[
			if(a>b && a<c){...}
		]]]>
		if(a &lt; b &amp;&amp; a &gt; c){...}	<!--传义字符 &lt;大于，&amp;&amp; &&;&gt; 小于 -->
	</code>
</users>

<!-- 
自定义文本标记语言，在html的前身拓展的，语法相对html较严格，
常用用于存储数据或配置文件使用，来代替properties文件，用于在网络编程中传输， 

特点：
	1、文档声明必须在xml文件的第一行，
	2、整个文件只能有一个根标签
	3、区分大小写
组成：
	1、文档声明
		1.1	格式：<?xml version="1.0" encodeing="UTF-8"?>
		1.2	属性列表：
			version	版本号
			[encoding]	解码方式,解析器解析文档的字符集，默认ISO
			[standalone]	是否独立,yes或no取值；前者不依赖其他文件，后者反之
	2、指令（结合css样式）
		格式：<?xml-stylesheet type="text/css" href="..\webapp\css\a.css" ?>
	3、标签

	4、属性

	5、文本

约束：规定xml文档的书写规则，要给框架引入约束文档，框架才能正确解析我们所编写的xml文件
	约束分类：
		DTD:一种简单的约束技术
		Schema：一种复杂的约束
	dta内部约束文档和外保约束文档:
		内部dtd:直接将约束规则定义在xml文件中，
		外部dtd:将约束规则定义在外部dtd文件中，需要引入
			引入外部约束文档分为本地的约束文档和网络上的约束文档
			本地：<!DOCTYPE 根标签名 SYSTEM "dtd文件的位置" >
			网络：<!DOCTYPE 根标签名 PUBICC "dtd文件名" "dtd文件的位置" >

	Scheme约束：

xml文档的解析与与写入：
	解析（读取）：将文档的数据读取到内存中，常用
	写入：将内存的数据保存到xml文档中，不常用略

	解析xml的方式：
		1、DOM:将标记语言文档（如html文件）一次性加载到内存中，载内存形成一棵DOM倒过来的树
			优点是操作方便可以进行增删改；缺点是在内存中形成的dom树会比较占内存
		2、SAX:逐行读取，基于事件的驱动
			优点是不占内存，缺点是只能读取，用于一些内存比较小的设配，如手机

	解析器：
		1、JAXP：sun公司提供的，支持dom和sax两种解析思想,不常用
		2、DOM4J：优秀！！！
		3、Jsoup：原本是java的，用来解析html文档的，后来也用来解析xml文档，提供了一套很省力的API
		4、PULL：Android操作系统自带的解析器，支持sax方式的解析
	Jsoup解析器的使用：
		1、导入soup的jar包
		2、获取Document对象
		3、获取对应的标签
		4、获取数据


	选择器：相当于js中的document.querySelector('#.');选择器，根据里面的字符来决定
		document.select('#input');
	XPath:





	 对象的使用：
            1. Jsoup：工具类，可以解析html或xml文档，返回Document
                * parse：解析html或xml文档，返回Document
                    * parse​(File in, String charsetName)：解析xml或html文件的。
                    * parse​(String html)：解析xml或html字符串
                    * parse​(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象
            2. Document：文档对象。代表内存中的dom树
                * 获取Element对象
                    * getElementById​(String id)：根据id属性值获取唯一的element对象
                    * getElementsByTag​(String tagName)：根据标签名称获取元素对象集合
                    * getElementsByAttribute​(String key)：根据属性名称获取元素对象集合
                    * getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合
            3. Elements：元素Element对象的集合。可以当做 ArrayList<Element>来使用
            4. Element：元素对象
                1. 获取子元素对象
                    * getElementById​(String id)：根据id属性值获取唯一的element对象
                    * getElementsByTag​(String tagName)：根据标签名称获取元素对象集合
                    * getElementsByAttribute​(String key)：根据属性名称获取元素对象集合
                    * getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合

                2. 获取属性值
                    * String attr(String key)：根据属性名称获取属性值
                3. 获取文本内容
                    * String text():获取文本内容
                    * String html():获取标签体的所有内容(包括字标签的字符串内容)
            5. Node：节点对象
                * 是Document和Element的父类


        * 快捷查询方式：
            1. selector:选择器
                * 使用的方法：Elements    select​(String cssQuery)

                   cssQuery按照以前css选择器名字来做
					Elements  select (String  cssQuery)                                                         通过css选择器获取Elements对象
					Element  selectFirst(String  cssQuery)   通过css选择获得第一个Element对象
					普通选择器：
					ID选择器	#id
					class选择器	.class
					标签选择器	div
					属性选择器	[attr]
					属性值选择器	[attr=xx]

					组合选择器：
					标签名.类名	div.one	class属性为one的div标签
					标签名[属性名]	a[href]	有href属性的a标签
					父元素 子元素	div  a	div内的a标签
					兄弟标签A+兄弟标签B	div+span	取到与div标签同级的span标签

                 * 语法：参考Selector类中定义的语法
            2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言
                * 使用Jsoup的Xpath需要额外导入jar包。
                * 查询w3cshool参考手册，使用xpath的语法完成查询
-->










